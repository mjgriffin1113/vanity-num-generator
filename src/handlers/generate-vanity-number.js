/**
 * @description - this lambda will get the caller's phone number and use it to generate
 *                5 vanity numbers, and then choose the best one
 */

const alphabetMap = require('../util/alphabetMap')
const vowelList = require('../util/vowelList')

/**
 * 
 * @param {string[]} suffixOptions - list of 5 possible vanity numbers 
 * @returns {string} - the BEST* vanity number (*for now, the one with the most vowels, inluding y because y not)
 * 
 * @todo - BEST could mean the number wih the longest english word. And we could enhance the 
 * suffix generator to only suggest a vanity string if it has a minimum length word)
 */
function getBestSuffix (suffixOptions) {
    let maxVowelCount = 0;
    let bestOptions = [];

    // loop through the options and count the vowels in each one
    for (let i = 0; i < suffixOptions.length; i += 1) {
        let vowelCount = 0;
        const option = suffixOptions[i]
        const digits = Array.from(option);
        for (let y = 0; y < digits.length; y += 1) {
            if (vowelList.includes(digits[y])) {
                vowelCount += 1;
            }
        }
        // if there is a new max, empty the options array then update accordingly
        // if there is a tie, add to the options array
        if (vowelCount > maxVowelCount) {
            bestOptions = [option];
            maxVowelCount = vowelCount;
        } else if (vowelCount == maxVowelCount) {
            bestOptions.push(option);
        }
    }

    // if there is more than one BEST option, pick one
    return bestOptions[Math.floor(Math.random() * bestOptions.length)]
}

/**
 * 
 * @param {string} phoneNumber - the section of the caller phone number to be converted to a vanity number
 * @returns {string} - a randomly generated vanity number
 */
function createVanitySuffix (phoneNumber) {
    let vanityNumber = '';
    const phoneDigits = Array.from(phoneNumber);

    // for now the vanity number will be generated by picking a possible letter at random
    // could be enhanced to generate 'quality' options rather than random ones
    for (let i = 0; i < phoneDigits.length; i += 1) {
        const digit = phoneDigits[i];
        const vanityDigitOptions = alphabetMap[digit];
        const item = vanityDigitOptions[Math.floor(Math.random() * vanityDigitOptions.length)];
        vanityNumber += item;
    }

    return vanityNumber
}

/**
 * 
 * @param {string} customerPhone - the phone number of the caller
 * @returns {string[]} - the country/area code as the first element, and the digits to 
 *                       be converted to the vanity number as the second (array of length 2)
 */
function getVanityDigits (customerPhone) {
    // if the number is 7 digits or less, make the whole thing vain
    if (customerPhone.length <= 7) return ['', customerPhone]
    // separate the last 7 digits 'xxxxxxx' from the phone number
    const splitIndex = customerPhone.length - 7;
    const lastSeven = customerPhone.substring(splitIndex);
    const numberPrefix = customerPhone.substring(0, splitIndex);
    
    return [numberPrefix, lastSeven]
}

/**
 * 
 * @param {string} customerPhone - the phone number of the caller
 * @return {string[]} - a list of 5 possible vanity numbers
 */
function generateVanityNumber (customerPhone) {
    // generate the vanity number (duh)
    // get the numbers needed to generate the suggestions
    const numberSplit = getVanityDigits(customerPhone);
    const prefix = numberSplit[0];

    // generate and store 5 options
    const suffixOptions = [];
    while (suffixOptions.length < 5) {
        const suffix = createVanitySuffix(numberSplit[1]);
        if (suffixOptions.indexOf(suffix) === -1) {
            suffixOptions.push(suffix)
        }
    }

    // get the BEST suffix
    const bestSuffix = getBestSuffix(suffixOptions)

    return {
        customerPhone,
        option1: suffixOptions[0],
        option2: suffixOptions[1],
        option3: suffixOptions[2],
        option4: suffixOptions[3],
        option5: suffixOptions[4],
        vanityNumber: prefix + ' ' + bestSuffix
    }
}

exports.generateNumberHandler = function(event, context, callback) {
    const customerPhone = event.Details.ContactData.CustomerEndpoint.Address;
    
    if (!customerPhone) callback(new Error('could not find customer phone in event details'));
	
	const result = generateVanityNumber(customerPhone);

	callback(null, result);
}
